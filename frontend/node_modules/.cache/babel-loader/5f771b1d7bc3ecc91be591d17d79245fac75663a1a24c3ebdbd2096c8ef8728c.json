{"ast":null,"code":"var _jsxFileName = \"/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js\",\n  _s = $RefreshSig$();\nimport { Link } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = () => {\n  _s();\n  // state to store solve time\n  const [time, setTime] = useState(0);\n\n  // state to check stopwatch running or not\n  const [isRunning, setIsRunning] = useState(false);\n  useEffect(() => {\n    let intervalId;\n    if (isRunning) {\n      // setting time from 0 to 1 every 10 ms using javascript setInterval met\n      intervalId = setInterval(() => setTime(time + 1), 10);\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, time]);\n\n  // hours calculation\n  const hours = Math.floor(time / 360000);\n\n  // minutes calculation\n  const minutes = Math.floor(time % 360000 / 6000);\n\n  // seconds calculation\n  const seconds = Math.floor(time % 6000 / 100);\n\n  // milliseconds calculation\n  const milliseconds = time % 100;\n\n  // state to measure duration of a key pressed down\n  const [keyPressTime, setKeyPressTime] = useState(null);\n\n  // state to determine if a key is pressed long enough\n  const [timer, setTimer] = useState(null);\n\n  // reset and start stopwatch with spacebar\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (!isRunning && e.key === \" \" && !keyPressTime) {\n        const startTime = Date.now();\n        setKeyPressTime(startTime);\n        const newTimer = setTimeout(() => {\n          if (Date.now() - startTime >= 1000) {\n            reset();\n            start();\n          }\n        }, 1000);\n        setTimer(newTimer);\n      }\n    };\n    const handleKeyUp = e => {\n      if (e.key === \" \") {\n        setKeyPressTime(null);\n        if (timer) {\n          clearTimeout();\n          setTimer(null);\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [keyPressTime, timer]);\n\n  // stop stopwatch with any key\n  useEffect(() => {\n    const handleKeyDown = () => {\n      if (isRunning) {\n        stop();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  // method to start stopwatch\n  const start = () => {\n    setIsRunning(true);\n  };\n\n  // method to stop stopwatch\n  const stop = () => {\n    setIsRunning(false);\n  };\n\n  // method to reset stopwatch\n  const reset = () => {\n    setTime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"stopwatch-time\",\n      children: [hours, \":\", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\"), \".\", milliseconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch-buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: () => {\n          if (!isRunning) {\n            console.log(hours + \":\" + minutes.toString().padStart(2, \"0\") + \":\" + seconds.toString().padStart(2, \"0\") + \".\" + milliseconds.toString().padStart(2, \"0\"));\n          }\n        },\n        children: \"Show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(Stopwatch, \"lQkTSuih3MKalwaMAfrKXoCs2Zc=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["Link","React","useState","useEffect","jsxDEV","_jsxDEV","Stopwatch","_s","time","setTime","isRunning","setIsRunning","intervalId","setInterval","clearInterval","hours","Math","floor","minutes","seconds","milliseconds","keyPressTime","setKeyPressTime","timer","setTimer","handleKeyDown","e","key","startTime","Date","now","newTimer","setTimeout","reset","start","handleKeyUp","clearTimeout","document","addEventListener","removeEventListener","stop","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","onClick","console","log","_c","$RefreshReg$"],"sources":["/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js"],"sourcesContent":["import { Link } from 'react-router-dom'\nimport React, { useState, useEffect } from 'react'\n\nconst Stopwatch = () => {\n    // state to store solve time\n    const [time, setTime] = useState(0)\n\n    // state to check stopwatch running or not\n    const [isRunning, setIsRunning] = useState(false)\n\n    useEffect(() => {\n        let intervalId\n\n        if (isRunning) {\n            // setting time from 0 to 1 every 10 ms using javascript setInterval met\n            intervalId = setInterval(() => setTime(time + 1), 10)\n        }\n\n        return () => clearInterval(intervalId)\n    }, [isRunning, time])\n\n    // hours calculation\n    const hours = Math.floor(time / 360000)\n\n    // minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000)\n\n    // seconds calculation\n    const seconds = Math.floor((time % 6000) / 100)\n\n    // milliseconds calculation\n    const milliseconds = time % 100\n\n    // state to measure duration of a key pressed down\n    const [keyPressTime, setKeyPressTime] = useState(null)\n\n    // state to determine if a key is pressed long enough\n    const [timer, setTimer] = useState(null)\n\n    // reset and start stopwatch with spacebar\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if (!isRunning && e.key === \" \" && !keyPressTime) {\n                const startTime = Date.now()\n                setKeyPressTime(startTime)\n\n                const newTimer = setTimeout(() => {\n                    if (Date.now() - startTime >= 1000) {\n                        reset()\n                        start()\n                    }\n                }, 1000)\n\n                setTimer(newTimer)\n            }\n        }\n\n        const handleKeyUp = (e) => {\n            if (e.key === \" \") {\n                setKeyPressTime(null)\n                if (timer) {\n                    clearTimeout()\n                    setTimer(null)\n                }\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown)\n        document.addEventListener('keyup', handleKeyUp)\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown)\n            document.removeEventListener('keyup', handleKeyUp)\n        }\n    }, [keyPressTime, timer])\n\n    // stop stopwatch with any key\n    useEffect(() => {\n        const handleKeyDown = () => {\n            if (isRunning) {\n                stop()\n            }\n        }\n\n        document.addEventListener('keydown', handleKeyDown)\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown)\n        }\n    })\n\n    // method to start stopwatch\n    const start = () => {\n        setIsRunning(true)\n    }\n\n    // method to stop stopwatch\n    const stop = () => {\n        setIsRunning(false)\n    }\n\n    // method to reset stopwatch\n    const reset = () => {\n        setTime(0)\n    }\n\n    return (\n        <div className='stopwatch-container'>\n            <p className='stopwatch-time'>\n                {hours}:{minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}.{milliseconds.toString().padStart(2, \"0\")}\n            </p>\n            <div className='stopwatch-buttons'>\n                <button className='stopwatch-button' onClick={() => {\n                    if (!isRunning) {\n                        console.log(hours + \":\" + minutes.toString().padStart(2, \"0\") + \":\" + seconds.toString().padStart(2, \"0\") + \".\" + milliseconds.toString().padStart(2, \"0\"))\n                    }\n                }}>\n                    Show\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Stopwatch"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}