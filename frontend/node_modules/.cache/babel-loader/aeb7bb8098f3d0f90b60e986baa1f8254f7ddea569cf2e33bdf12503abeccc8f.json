{"ast":null,"code":"var _jsxFileName = \"/Users/jasonthung/rubik_timer/frontend/src/components/Scramble.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SCRAMBLE_LENGTH = 20;\nconst Scramble = () => {\n  _s();\n  const generateScrambleSequence = () => {\n    const faces = ['R', 'L', 'F', 'B', 'U', 'D'];\n    const directions = ['', \"'\", '2'];\n    const scrambleLength = Math.floor(Math.random() * 5) + 16;\n    let sequence = [];\n    let prev_face = \"\";\n    while (sequence.length < scrambleLength) {\n      let turn_face = faces[Math.floor(Math.random() * 6)];\n      while (turn_face === prev_face) {\n        turn_face = faces[Math.floor(Math.random() * 6)];\n      }\n      let turn_direction = directions[Math.floor(Math.random() * 3)];\n      let turn = turn_face + turn_direction;\n      sequence.push(turn);\n      prev_face = turn_face;\n    }\n    return sequence.join(' ') + \"\\nScramble Length: \" + sequence.length;\n  };\n  const [scramble, setScramble] = useState(generateScrambleSequence);\n  const generateNewScramble = () => {\n    setScramble(generateScrambleSequence);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: scramble\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateNewScramble,\n      children: \"New scramble\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Scramble, \"oi5OU7eLk6L9WfqLrA77dcFL+C0=\");\n_c = Scramble;\nexport default Scramble;\nvar _c;\n$RefreshReg$(_c, \"Scramble\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SCRAMBLE_LENGTH","Scramble","_s","generateScrambleSequence","faces","directions","scrambleLength","Math","floor","random","sequence","prev_face","length","turn_face","turn_direction","turn","push","join","scramble","setScramble","generateNewScramble","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jasonthung/rubik_timer/frontend/src/components/Scramble.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst SCRAMBLE_LENGTH = 20\n\nconst Scramble = () => {\n    const generateScrambleSequence = () => {\n        const faces = ['R', 'L', 'F', 'B', 'U', 'D']\n        const directions = ['', \"'\", '2']\n\n        const scrambleLength = Math.floor(Math.random() * 5) + 16\n\n        let sequence = []\n        let prev_face = \"\"\n\n        while (sequence.length < scrambleLength) {\n            let turn_face = faces[Math.floor(Math.random() * 6)]\n            while (turn_face === prev_face) {\n                turn_face = faces[Math.floor(Math.random() * 6)]\n            }\n\n            let turn_direction = directions[Math.floor(Math.random() * 3)]\n            let turn = turn_face + turn_direction\n\n            sequence.push(turn)\n\n            prev_face = turn_face\n        }\n\n        return sequence.join(' ') + \"\\nScramble Length: \" + sequence.length\n    }\n\n    const [scramble, setScramble] = useState(generateScrambleSequence)\n\n    const generateNewScramble = () => {\n        setScramble(generateScrambleSequence)\n    }\n\n    return (\n        <div>\n            <p>{scramble}</p>\n            <button onClick={generateNewScramble}>New scramble</button>\n        </div>\n    )\n}\n\nexport default Scramble"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,eAAe,GAAG,EAAE;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;IACnC,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC5C,MAAMC,UAAU,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IAEjC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;IAEzD,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,SAAS,GAAG,EAAE;IAElB,OAAOD,QAAQ,CAACE,MAAM,GAAGN,cAAc,EAAE;MACrC,IAAIO,SAAS,GAAGT,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MACpD,OAAOI,SAAS,KAAKF,SAAS,EAAE;QAC5BE,SAAS,GAAGT,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MACpD;MAEA,IAAIK,cAAc,GAAGT,UAAU,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC9D,IAAIM,IAAI,GAAGF,SAAS,GAAGC,cAAc;MAErCJ,QAAQ,CAACM,IAAI,CAACD,IAAI,CAAC;MAEnBJ,SAAS,GAAGE,SAAS;IACzB;IAEA,OAAOH,QAAQ,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG,qBAAqB,GAAGP,QAAQ,CAACE,MAAM;EACvE,CAAC;EAED,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAACO,wBAAwB,CAAC;EAElE,MAAMiB,mBAAmB,GAAGA,CAAA,KAAM;IAC9BD,WAAW,CAAChB,wBAAwB,CAAC;EACzC,CAAC;EAED,oBACIJ,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAIH;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB1B,OAAA;MAAQ2B,OAAO,EAAEN,mBAAoB;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEd,CAAC;AAAAvB,EAAA,CAvCKD,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAyCd,eAAeA,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}