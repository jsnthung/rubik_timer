{"ast":null,"code":"var _jsxFileName = \"/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js\",\n  _s = $RefreshSig$();\nimport { Link } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = () => {\n  _s();\n  // string representation of time\n\n  // state to store time\n  const [time, setTime] = useState(0);\n\n  // state to check stopwatch running or not\n  const [isRunning, setIsRunning] = useState(false);\n  useEffect(() => {\n    let i = 0;\n    document.addEventListener(\"keydown\", () => {\n      console.log(\"You pressed down\");\n    });\n    let intervalId;\n    if (isRunning) {\n      // setting time from 0 to 1 every 10 ms using javascript setInterval met\n      intervalId = setInterval(() => setTime(time + 1), 10);\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, time]);\n\n  // hours calculation\n  const hours = Math.floor(time / 360000);\n\n  // minutes calculation\n  const minutes = Math.floor(time % 360000 / 6000);\n\n  // seconds calculation\n  const seconds = Math.floor(time % 6000 / 100);\n\n  // milliseconds calculation\n  const milliseconds = time % 100;\n\n  // method to start stopwatch\n  const start = () => {\n    setIsRunning(true);\n  };\n\n  // method to stop stopwatch\n  const stop = () => {\n    setIsRunning(false);\n  };\n\n  // method to reset stopwatch\n  const reset = () => {\n    setTime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"stopwatch-time\",\n      children: [hours, \":\", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\"), \".\", milliseconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: start,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: stop,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: () => {\n          if (!isRunning) {\n            console.log(hours + \":\" + minutes.toString().padStart(2, \"0\") + \":\" + seconds.toString().padStart(2, \"0\") + \".\" + milliseconds.toString().padStart(2, \"0\"));\n          }\n        },\n        children: \"Show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(Stopwatch, \"th9G96ix7qzT0R5Zt2LTZjfttJA=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["Link","React","useState","useEffect","jsxDEV","_jsxDEV","Stopwatch","_s","time","setTime","isRunning","setIsRunning","i","document","addEventListener","console","log","intervalId","setInterval","clearInterval","hours","Math","floor","minutes","seconds","milliseconds","start","stop","reset","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js"],"sourcesContent":["import { Link } from 'react-router-dom'\nimport React, { useState, useEffect } from 'react'\n\nconst Stopwatch = () => {\n    // string representation of time\n\n    // state to store time\n    const [time, setTime] = useState(0)\n\n    // state to check stopwatch running or not\n    const [isRunning, setIsRunning] = useState(false)\n\n    useEffect(() => {\n        let i = 0\n        document.addEventListener(\"keydown\", () => { console.log(\"You pressed down\") })\n\n        let intervalId\n\n        if (isRunning) {\n            // setting time from 0 to 1 every 10 ms using javascript setInterval met\n            intervalId = setInterval(() => setTime(time + 1), 10)\n        }\n\n        return () => clearInterval(intervalId)\n    }, [isRunning, time])\n\n    // hours calculation\n    const hours = Math.floor(time / 360000)\n\n    // minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000)\n\n    // seconds calculation\n    const seconds = Math.floor((time % 6000) / 100)\n\n    // milliseconds calculation\n    const milliseconds = time % 100\n\n    // method to start stopwatch\n    const start = () => {\n        setIsRunning(true)\n    }\n\n    // method to stop stopwatch\n    const stop = () => {\n        setIsRunning(false)\n    }\n\n    // method to reset stopwatch\n    const reset = () => {\n        setTime(0)\n    }\n\n    return (\n        <div className='stopwatch-container'>\n            <p className='stopwatch-time'>\n                {hours}:{minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}.{milliseconds.toString().padStart(2, \"0\")}\n            </p>\n            <div className='stopwatch-buttons'>\n                <button className='stopwatch-button' onClick={start}>\n                    Start\n                </button>\n                <button className='stopwatch-button' onClick={stop}>\n                    Stop\n                </button>\n                <button className='stopwatch-button' onClick={reset}>\n                    Reset\n                </button>\n                <button className='stopwatch-button' onClick={() => {\n                    if (!isRunning) {\n                        console.log(hours + \":\" + minutes.toString().padStart(2, \"0\") + \":\" + seconds.toString().padStart(2, \"0\") + \".\" + milliseconds.toString().padStart(2, \"0\"))\n                    }\n                }}>\n                    Show\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Stopwatch"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}