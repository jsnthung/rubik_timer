{"ast":null,"code":"var _jsxFileName = \"/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js\",\n  _s = $RefreshSig$();\nimport { Link } from 'react-router-dom';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = () => {\n  _s();\n  // state to store solve time\n  const [time, setTime] = useState(0);\n\n  // state to check stopwatch running or not\n  const [isRunning, setIsRunning] = useState(false);\n  useEffect(() => {\n    let intervalId;\n    if (isRunning) {\n      // setting time from 0 to 1 every 10 ms using javascript setInterval met\n      intervalId = setInterval(() => setTime(time + 1), 10);\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, time]);\n\n  // hours calculation\n  const hours = Math.floor(time / 360000);\n\n  // minutes calculation\n  const minutes = Math.floor(time % 360000 / 6000);\n\n  // seconds calculation\n  const seconds = Math.floor(time % 6000 / 100);\n\n  // milliseconds calculation\n  const milliseconds = time % 100;\n\n  // ref to store timestamp when spacebar is pressed down\n  const spacebarDownTime = useRef(null);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === \" \") {\n        spacebarDownTime.current = Date.now();\n        console.log(spacebarDownTime.current);\n      } else {\n        setIsRunning(false);\n      }\n    };\n    const handleKeyUp = event => {\n      if (event.key === \" \" && spacebarDownTime.current) {\n        const upTimestamp = Date.now();\n        const pressDuration = upTimestamp - spacebarDownTime.current;\n        console.log(\"This is how long you pressed spacebar in milliseconds: \" + pressDuration);\n        console.log(\"Keydown timestamp: \" + spacebarDownTime.current);\n        console.log(\"Keyup timestamp: \" + upTimestamp);\n        if (pressDuration >= 1000) {\n          console.log(\"You have pressed spacebar for more than 1 second\"); // debug\n          setTime(0);\n          setIsRunning(true);\n        }\n        spacebarDownTime.current = null;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"stopwatch-time\",\n      children: [hours, \":\", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\"), \".\", milliseconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: () => {\n          setIsRunning(true);\n        },\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: () => {\n          setIsRunning(false);\n        },\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: () => {\n          setTime(0);\n        },\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stopwatch-button\",\n        onClick: () => {\n          if (!isRunning) {\n            console.log(hours + \":\" + minutes.toString().padStart(2, \"0\") + \":\" + seconds.toString().padStart(2, \"0\") + \".\" + milliseconds.toString().padStart(2, \"0\"));\n          }\n        },\n        children: \"Show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(Stopwatch, \"AH9s1lpuAah81oAd3xt2uc3Zh58=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["Link","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Stopwatch","_s","time","setTime","isRunning","setIsRunning","intervalId","setInterval","clearInterval","hours","Math","floor","minutes","seconds","milliseconds","spacebarDownTime","handleKeyDown","event","key","current","Date","now","console","log","handleKeyUp","upTimestamp","pressDuration","window","addEventListener","removeEventListener","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js"],"sourcesContent":["import { Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\n\nconst Stopwatch = () => {\n    // state to store solve time\n    const [time, setTime] = useState(0)\n\n    // state to check stopwatch running or not\n    const [isRunning, setIsRunning] = useState(false)\n\n    useEffect(() => {\n        let intervalId\n\n        if (isRunning) {\n            // setting time from 0 to 1 every 10 ms using javascript setInterval met\n            intervalId = setInterval(() => setTime(time + 1), 10)\n        }\n\n        return () => clearInterval(intervalId)\n    }, [isRunning, time])\n\n    // hours calculation\n    const hours = Math.floor(time / 360000)\n\n    // minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000)\n\n    // seconds calculation\n    const seconds = Math.floor((time % 6000) / 100)\n\n    // milliseconds calculation\n    const milliseconds = time % 100\n\n    // ref to store timestamp when spacebar is pressed down\n    const spacebarDownTime = useRef(null)\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === \" \") {\n                spacebarDownTime.current = Date.now()\n                console.log(spacebarDownTime.current)\n            } else {\n                setIsRunning(false)\n            }\n        }\n\n        const handleKeyUp = (event) => {\n            if (event.key === \" \" && spacebarDownTime.current) {\n                const upTimestamp = Date.now()\n\n                const pressDuration = upTimestamp - spacebarDownTime.current\n\n                console.log(\"This is how long you pressed spacebar in milliseconds: \" + pressDuration)\n                console.log(\"Keydown timestamp: \" + spacebarDownTime.current)\n                console.log(\"Keyup timestamp: \" + upTimestamp)\n\n                if (pressDuration >= 1000) {\n                    console.log(\"You have pressed spacebar for more than 1 second\") // debug\n                    setTime(0)\n                    setIsRunning(true)\n                }\n\n                spacebarDownTime.current = null\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown)\n        window.addEventListener('keyup', handleKeyUp)\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown)\n            window.removeEventListener('keyup', handleKeyUp)\n        }\n    })\n\n    return (\n        <div className='stopwatch-container'>\n            <p className='stopwatch-time'>\n                {hours}:{minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}.{milliseconds.toString().padStart(2, \"0\")}\n            </p>\n            <div className='stopwatch-buttons'>\n                <button className='stopwatch-button' onClick={() => { setIsRunning(true) }}>\n                    Start\n                </button>\n                <button className='stopwatch-button' onClick={ () => {setIsRunning(false)} }>\n                    Stop\n                </button>\n                <button className='stopwatch-button' onClick={ () => {setTime(0)} }>\n                    Reset\n                </button>\n                <button className='stopwatch-button' onClick={() => {\n                    if (!isRunning) {\n                        console.log(hours + \":\" + minutes.toString().padStart(2, \"0\") + \":\" + seconds.toString().padStart(2, \"0\") + \".\" + milliseconds.toString().padStart(2, \"0\"))\n                    }\n                }}>\n                    Show\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Stopwatch"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}