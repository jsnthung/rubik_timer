{"ast":null,"code":"var _jsxFileName = \"/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { generateNewScramble } from './Scramble';\n\n// TODO: Maybe create a class of duration. It will have a time property of type number, then a function to convert it into human readable time 00:00:00.00\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = () => {\n  _s();\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const spacebarDownTime = useRef(null);\n  const [message, setMessage] = useState('Hold down spacebar');\n  const [scramble, setScramble] = useState(\"\");\n  useEffect(() => {\n    let intervalId;\n    if (isRunning) {\n      intervalId = setInterval(() => setTime(time + 1), 10);\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, time]);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (isRunning) {\n        generateNewScramble(setScramble);\n        setIsRunning(false);\n        setMessage('Hold down spacebar');\n      } else if (event.key === \" \" && spacebarDownTime.current === null) {\n        spacebarDownTime.current = Date.now();\n        setMessage('Hold down spacebar');\n      }\n    };\n    const handleKeyUp = event => {\n      if (event.key === \" \" && spacebarDownTime.current !== null) {\n        const pressDuration = Date.now() - spacebarDownTime.current;\n        if (pressDuration >= 1000) {\n          setTime(0);\n          setIsRunning(true);\n          setMessage('Press any key to stop');\n        }\n        // else {\n        //     setIsRunning(prevState => !prevState)\n        //     setMessage(prevState => (prevState === 'Press any key to stop' ? 'Hold down spacebar' : 'Press any key to stop'))\n        // }\n\n        spacebarDownTime.current = null;\n      }\n    };\n    const handleKeyPress = () => {\n      if (spacebarDownTime.current !== null) {\n        const pressDuration = Date.now() - spacebarDownTime.current;\n        if (pressDuration >= 1000) {\n          setMessage('Release to start');\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    window.addEventListener('keypress', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n      window.removeEventListener('keypress', handleKeyPress);\n    };\n  });\n  const hours = Math.floor(time / 360000);\n  const minutes = Math.floor(time % 360000 / 6000);\n  const seconds = Math.floor(time % 6000 / 100);\n  const milliseconds = time % 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"stopwatch-time\",\n      children: [hours, \":\", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\"), \".\", milliseconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Stopwatch, \"qgKiJibZ1K5p/t1fn7So3gTQZNA=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","useState","useEffect","useRef","generateNewScramble","jsxDEV","_jsxDEV","Stopwatch","_s","time","setTime","isRunning","setIsRunning","spacebarDownTime","message","setMessage","scramble","setScramble","intervalId","setInterval","clearInterval","handleKeyDown","event","key","current","Date","now","handleKeyUp","pressDuration","handleKeyPress","window","addEventListener","removeEventListener","hours","Math","floor","minutes","seconds","milliseconds","className","children","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jasonthung/rubik_timer/frontend/src/components/Stopwatch.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { generateNewScramble } from './Scramble'\n\n// TODO: Maybe create a class of duration. It will have a time property of type number, then a function to convert it into human readable time 00:00:00.00\n\nconst Stopwatch = () => {\n    const [time, setTime] = useState(0)\n    const [isRunning, setIsRunning] = useState(false)\n    const spacebarDownTime = useRef(null)\n    const [message, setMessage] = useState('Hold down spacebar')\n    const [scramble, setScramble] = useState(\"\");\n\n    useEffect(() => {\n        let intervalId\n\n        if (isRunning) {\n            intervalId = setInterval(() => setTime(time + 1), 10)\n        }\n\n        return () => clearInterval(intervalId)\n    }, [isRunning, time])\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (isRunning) {    \n                generateNewScramble(setScramble)\n                setIsRunning(false)\n                setMessage('Hold down spacebar')\n            } else if (event.key === \" \" && spacebarDownTime.current === null) {\n                spacebarDownTime.current = Date.now()\n                setMessage('Hold down spacebar')\n            }\n        }\n\n        const handleKeyUp = (event) => {\n            if (event.key === \" \" && spacebarDownTime.current !== null) {\n                const pressDuration = Date.now() - spacebarDownTime.current\n\n                if (pressDuration >= 1000) {\n                    setTime(0)\n                    setIsRunning(true)\n                    setMessage('Press any key to stop')\n                } \n                // else {\n                //     setIsRunning(prevState => !prevState)\n                //     setMessage(prevState => (prevState === 'Press any key to stop' ? 'Hold down spacebar' : 'Press any key to stop'))\n                // }\n\n                spacebarDownTime.current = null  \n            } \n        }\n\n        const handleKeyPress = () => {\n            if (spacebarDownTime.current !== null) {\n                const pressDuration = Date.now() - spacebarDownTime.current\n                if (pressDuration >= 1000) {\n                    setMessage('Release to start')\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown)\n        window.addEventListener('keyup', handleKeyUp)\n        window.addEventListener('keypress', handleKeyPress)\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown)\n            window.removeEventListener('keyup', handleKeyUp)\n            window.removeEventListener('keypress', handleKeyPress)\n        }\n    })\n\n    const hours = Math.floor(time / 360000)\n    const minutes = Math.floor((time % 360000) / 6000)\n    const seconds = Math.floor((time % 6000) / 100)\n    const milliseconds = time % 100\n\n    return (\n        <div className='stopwatch-container'>\n            <p className='stopwatch-time'>\n                {hours}:{minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}.{milliseconds.toString().padStart(2, \"0\")}\n            </p>\n            <div>\n                {message}\n            </div>\n        </div>\n    )\n}\n\nexport default Stopwatch"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}